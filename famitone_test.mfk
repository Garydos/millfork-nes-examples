// compile with -t nes_small_v

import nes_joy
import famitone5

const word ppu_nametable_ram = $2000
const word ppu_pallete_ram = $3F00

array oam_buffer [256] @$200 // sprite buffer


void main() {
    init_sprites()
    load_palletes()
    clear_screen()
    
    //set up the music
    FamiToneInit($01, music.addr)
    FamiToneMusicPlay($00)
    
    ppu_set_scroll(0,0)
    ppu_wait_vblank()
    ppu_ctrl = %10010000   // enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
    ppu_mask = %00011110   // enable sprites, enable background, no clipping on left side

    while(true) {}
}

void nmi() {
    ppu_oam_dma_write(oam_buffer.addr.hi)
    
    ppu_set_scroll(0,0)
    ppu_ctrl = %10010000
    ppu_mask = %00011110
    
    FamiToneUpdate()
}

void irq() {
}

inline void clear_screen() {
    word i
    read_ppu_status()
    ppu_set_addr(ppu_nametable_ram)
    for i,0,until,$3C0 {
        ppu_write_data($24) //$24 = sky tile
    }
}

void init_sprites() {
    byte i
    for i,0,to,255 {
        if (i & %00000011) == 0 {
            //each sprite takes up 4 bytes, and we want to edit
            //the y position of each sprite (0th byte)
            //so we use the %00000011 mask to write every 4th byte (every 0th sprite byte)
            
            oam_buffer[i] = $ef // move the sprite off screen
        }
        else {
            oam_buffer[i] = 0
        }
    }
}

void load_palletes() {
    byte i
    read_ppu_status() // read PPU status to reset the high/low latch
    ppu_set_addr(ppu_pallete_ram) // point the PPU to palette ram
    for i,0,until,$20 {
        ppu_write_data(pallete[i])
    }
}

inline asm void ppu_wait_vblank() {
    vblankwait:
        BIT $2002
        ! BPL vblankwait
    ? RTS
}

const array pallete = [
  $0F,$17,$18,$29,$34,$38,$18,$2A,$38,$39,$3A,$3B,$3C,$3D,$3E,$0F, //nametable palettes
  $3C,$10,$37,$0F,$07,$10,$2D,$0F,$0F,$00,$0F,$36,$31,$02,$38,$3C  //sprite palettes
]

//NOTE: Music binary file was made by using doug fraker's
//      famitone5.0 tools (https://github.com/nesdoug/famitone5.0),
//      compiling a NESASM program with ShanghaiTea.asm in place,
//      and then finally manually inspecting the rom to copy and
//      paste the result into a .bin file.  I'll possibly work on
//      porting the text2data tool over to export .mfk files, since
//      that's quite a bit of work.
const array music @ $A800 = file("ShanghaiTea.bin")

segment(chrrom) const array graphics @ $0000 = file("nesthing.chr")